// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser   Int       @id @default(autoincrement())
  namaUser String    @unique
  username String    @unique
  password String
  email    String    @unique
  role     Role
  Makanan  Makanan[]

  Menu Menu[]

  Pasien          Pasien[] @relation("CreatedByUser")
  validatedByUser Pasien[] @relation("ValidatedByUser")
}

model Pasien {
  idPasien        Int         @id @default(autoincrement())
  uuid            String      @unique
  mr              String      @unique
  namaPasien      String
  tempatTidur     String
  diagnosa        String
  status          Status
  validate        Boolean     @default(false)
  link            String      @unique
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  createdBy       Int
  validatedBy     Int?
  user            User        @relation("CreatedByUser", fields: [createdBy], references: [idUser])
  validatedByUser User?       @relation("ValidatedByUser", fields: [validatedBy], references: [idUser])
  Pantangan       Pantangan[]
  Pesanan         Pesanan[]
}

model Makanan {
  idMakanan   Int         @id @default(autoincrement())
  namaMakanan String
  jenis       Jenis
  gambar      String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  menuId      Int?
  createdBy   Int
  user        User        @relation(fields: [createdBy], references: [idUser])
  menu        Menu?       @relation(fields: [menuId], references: [idMenu])
  Pantangan   Pantangan[]

  PesananDetailMakanan PesananDetail[] @relation("PesananDetailMakanan")

  utamaDari       Makanan[]         @relation("UtamaRelasi")
  punyaUtama      Makanan[]         @relation("UtamaRelasi")
  tanggalTersedia TanggalTersedia[]
}

model TanggalTersedia {
  idTanggal Int       @id @default(autoincrement())
  tanggal   DateTime
  makananId Int
  makanan   Makanan @relation(fields: [makananId], references: [idMakanan])
}

model Menu {
  idMenu     Int      @id @default(autoincrement())
  namaMenu   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  createdBy  Int
  user       User     @relation(fields: [createdBy], references: [idUser])

  Makanan Makanan[]
}

model Pantangan {
  idPantangan   Int      @id @default(autoincrement())
  namaPantangan String
  pasienId      Int
  makananId     Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  makanan Makanan @relation(fields: [makananId], references: [idMakanan])
  pasien  Pasien  @relation(fields: [pasienId], references: [idPasien])
}

model Pesanan {
  idPesanan  Int      @id @default(autoincrement())
  pasienId   Int
  sesi       String
  tanggal    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  pasien        Pasien          @relation(fields: [pasienId], references: [idPasien])
  PesananDetail PesananDetail[]
}

model PesananDetail {
  idPesananDetail Int @id @default(autoincrement())
  pesananId       Int
  makananId       Int

  pesanan Pesanan @relation(fields: [pesananId], references: [idPesanan])
  makanan Makanan @relation("PesananDetailMakanan", fields: [makananId], references: [idMakanan])
}

enum Jenis {
  Lauk
  Sayur
  Karbohidrat
  Buah
  Snack
  Minuman
}

enum Role {
  NURSE
  KITCHEN
  ADMIN
  DIETISIEN
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}
